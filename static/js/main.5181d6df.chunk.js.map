{"version":3,"sources":["features/Card.js","features/CardList.js","features/SearchBox.js","features/Scroll.js","features/ErrorBoundary.js","app/App.js","app/store/actions.js","app/store/constants.js","serviceWorker.js","app/store/reducer.js","index.js"],"names":["Card","robot","className","alt","src","id","name","email","CardList","robots","map","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","errorInfo","this","setState","Component","connect","searchField","searchRobots","requestRobots","isPending","dispatch","onSearchChange","event","payload","target","value","onRequestRobots","fetch","then","res","json","data","catch","err","filteredRobots","filter","console","log","toLowerCase","includes","useEffect","Boolean","window","location","hostname","match","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5181d6df.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ robot }) => {\n  return (\n    <div className={\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\"}>\n      <img alt={\"alt\"} src={`https://robohash.org/${robot.id}?200x200`} />\n      <div>\n        <h2>{robot.name}</h2>\n        <p>{robot.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((robot, key) => {\n        return <Card key={key} robot={robot} />;\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"85vh\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. that is not good.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../features/CardList\";\nimport SearchBox from \"../features/SearchBox\";\nimport \"../app/styles/app.css\";\nimport Scroll from \"../features/Scroll\";\nimport ErrorBoundary from \"../features/ErrorBoundary\";\nimport { setSearchField, requestRobots } from \"./store/actions\";\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\n\nconst App = (props) => {\n  const {\n    searchField,\n    onSearchChange,\n    onRequestRobots,\n    robots,\n    isPending,\n  } = props;\n\n  const filteredRobots = robots.filter((robot) => {\n    console.log(robot);\n    return robot.name.toLowerCase().includes(searchField.toLowerCase());\n  });\n\n  useEffect(() => {\n    onRequestRobots();\n  }, [onRequestRobots]);\n\n  return isPending ? (\n    <div className=\"tc\">\n      <h1 className=\"f1\">Loading</h1>\n    </div>\n  ) : (\n    <div className=\"tc\">\n      <h1 className=\"f1\">RoboFriends</h1>\n      <SearchBox searchChange={onSearchChange} />\n      <Scroll>\n        <ErrorBoundary>\n          <CardList robots={filteredRobots} />\n        </ErrorBoundary>\n      </Scroll>\n    </div>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(`https://jsonplaceholder.typicode.com/users`)\n    .then((res) => res.json())\n    .then((data) => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch((err) => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: err }));\n};\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\n\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED,\n} from \"./constants\";\n\nconst initialState = {\n  searchField: \"\",\n};\n\nexport const searchRobots = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    default:\n      return state;\n  }\n};\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: \"\",\n};\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false,\n      });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false,\n      });\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport \"./app/styles/index.css\";\nimport \"tachyons\";\nimport App from \"./app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { searchRobots, requestRobots } from \"./app/store/reducer\";\nimport { createLogger } from \"redux-logger/src\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}